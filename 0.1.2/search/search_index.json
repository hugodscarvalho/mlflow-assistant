{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MLflow Assistant","text":"<p>A Python package that simplifies working with MLflow by providing streamlined tools and utilities for machine learning experiment tracking and model management.</p>"},{"location":"#what-is-mlflow-assistant","title":"What is MLflow Assistant?","text":"<p>MLflow Assistant enhances your MLflow experience by offering:</p> <ul> <li>Simplified API: Easy-to-use interfaces for common MLflow operations</li> <li>Enhanced Workflows: Streamlined processes for experiment tracking</li> <li>Utility Functions: Helper tools for model management and deployment</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Install MLflow Assistant:</p> <pre><code>pip install mlflow-assistant\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Installation - Setup and installation instructions</li> <li>Code Reference - Complete API documentation</li> <li>Release Notes - What's new in each version</li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>GitHub Repository</li> <li>PyPI Package</li> <li>MLflow Documentation</li> </ul>"},{"location":"changelog/","title":"CHANGELOG","text":"<p>All notable changes to the <code>mlflow-assistant</code> package will be documented in this file.</p> <p>This project adheres to Semantic Versioning and follows changelog conventions inspired by Keep a Changelog.</p>"},{"location":"changelog/#v012-2025-07-15","title":"[v0.1.2] \u2013 2025-07-15","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Comprehensive documentation system with MkDocs Material theme</li> <li>Versioned documentation deployment using mike for GitHub Pages</li> <li>Automated documentation generation from code docstrings using mkdocstrings</li> <li>Code reference navigation with auto-generated API documentation</li> <li>Custom Geist font for modern, clean documentation appearance</li> <li>Integrated documentation deployment in the main CI/CD pipeline</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Enhanced CI/CD pipeline to include documentation deployment after successful releases</li> <li>Documentation now automatically deploys on version bumps and PyPI releases</li> </ul>"},{"location":"changelog/#notes","title":"Notes","text":"<ul> <li>Documentation is available at https://hugodscarvalho.github.io/mlflow-assistant/</li> <li>Each release gets its own versioned documentation with <code>latest</code> alias pointing to the newest version</li> </ul>"},{"location":"changelog/#v011-2025-07-14","title":"[v0.1.1] \u2013 2025-07-14","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Introduced a unified CI/CD pipeline for:</li> <li>Linting with <code>ruff</code>.</li> <li>Type checking with <code>mypy</code>.</li> <li>Test execution with <code>pytest</code> and coverage reporting via <code>pytest-cov</code>.</li> <li>Publishing to PyPI on new Git tags.</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Improved test fixture logic for integration tests to correctly check for a live MLflow Tracking Server before execution.</li> </ul>"},{"location":"changelog/#notes_1","title":"Notes","text":"<ul> <li>This pipeline simplifies maintenance by consolidating quality checks and publishing into a single workflow, triggered on pushes and releases.</li> </ul>"},{"location":"changelog/#v010-2025-05-08","title":"[v0.1.0] \u2013 2025-05-08","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Initial placeholder release of <code>mlflow-assistant</code> on PyPI.</li> <li>Included a minimal <code>MLflowClient</code> wrapper module.</li> </ul>"},{"location":"changelog/#notes_2","title":"Notes","text":"<ul> <li>This version was intentionally published with limited functionality to reserve the <code>mlflow-assistant</code> package name on PyPI.</li> <li>Full development will begin in upcoming versions with a focus on making MLflow easier to use through high-level utilities and assistant-like automation features.</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>This guide provides instructions on how to install and get started with <code>mlflow-assistant</code>.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Python: <code>mlflow-assistant</code> requires Python 3.9 or higher. You can check your Python version by running:</p> <pre><code>python --version\n</code></pre> <p>or</p> <pre><code>python3 --version\n</code></pre> </li> <li> <p>pip: Python's package installer, <code>pip</code>, is necessary to install <code>mlflow-assistant</code> and its dependencies. It usually comes bundled with Python. You can check if you have it by running:</p> <pre><code>pip --version\n</code></pre> <p>or</p> <pre><code>pip3 --version\n</code></pre> </li> </ul>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":"<p>You can install <code>mlflow-assistant</code> using pip:</p> <pre><code>pip install mlflow-assistant\n</code></pre>"},{"location":"reference/SUMMARY/","title":"Code Reference","text":"<ul> <li>mlflow_assistant<ul> <li>core<ul> <li>cli</li> <li>connection</li> <li>core</li> <li>provider</li> <li>workflow</li> </ul> </li> <li>utils<ul> <li>definitions</li> <li>exceptions</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/mlflow_assistant/__init__/","title":"init","text":""},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant","title":"<code>mlflow_assistant</code>","text":"<p>MLflow Assistant Package.</p> <p>This package provides functionality to interact with MLflow servers using natural language interfaces powered by large language models (LLMs). It includes modules for managing MLflow connections, workflows, and providers.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core","title":"<code>core</code>","text":"<p>Core functionality for MLflow Assistant.</p> <p>This subpackage contains the core modules for managing connections, workflows, and interactions with the MLflow Tracking Server.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.cli","title":"<code>cli</code>","text":"<p>Command-line interface (CLI) for MLflow Assistant.</p> <p>This module provides the CLI entry points for interacting with the MLflow Assistant, allowing users to manage connections, workflows, and other operations via the command line.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.connection","title":"<code>connection</code>","text":"<p>MLflow connection module for handling connections to MLflow Tracking Server.</p> <p>This module provides functionality to connect to both local and remote MLflow Tracking Servers using environment variables or direct configuration.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.connection.MLflowConnection","title":"<code>MLflowConnection(tracking_uri=None, client_factory=None)</code>","text":"<p>MLflow connection class to handle connections to MLflow Tracking Server.</p> <p>This class provides functionality to connect to both local and remote MLflow Tracking Servers.</p> <p>Initialize MLflow connection.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_uri</code> <code>str | None</code> <p>URI of the MLflow Tracking Server. If None, will try to get from environment.</p> <code>None</code> <code>client_factory</code> <code>Any</code> <p>A callable to create the MlflowClient instance. Defaults to MlflowClient.</p> <code>None</code> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def __init__(self, tracking_uri: str | None = None, client_factory: Any = None):\n    \"\"\"Initialize MLflow connection.\n\n    Args:\n        tracking_uri: URI of the MLflow Tracking Server. If None, will try to get from environment.\n        client_factory: A callable to create the MlflowClient instance. Defaults to MlflowClient.\n\n    \"\"\"\n    self.config = self._load_config(tracking_uri=tracking_uri)\n    self.client = None\n    self.is_connected_flag = False\n    self.client_factory = client_factory or MlflowClient\n</code></pre>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.connection.MLflowConnection.connect","title":"<code>connect()</code>","text":"<p>Connect to MLflow Tracking Server.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.connection.MLflowConnection.connect--returns","title":"Returns","text":"<pre><code>Tuple[bool, str]: (success, message)\n</code></pre> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def connect(self) -&gt; tuple[bool, str]:\n    \"\"\"Connect to MLflow Tracking Server.\n\n    Returns\n    -------\n        Tuple[bool, str]: (success, message)\n\n    \"\"\"\n    try:\n        logger.info(f\"Connecting to MLflow Tracking Server at {self.config.tracking_uri}\")\n        mlflow.set_tracking_uri(self.config.tracking_uri)\n        self.client = self.client_factory(tracking_uri=self.config.tracking_uri)\n        self.client.search_experiments()  # Trigger connection attempt\n        self.is_connected_flag = True\n        logger.info(f\"Successfully connected to MLflow Tracking Server at {self.config.tracking_uri}\")\n        return True, f\"Successfully connected to MLflow Tracking Server at {self.config.tracking_uri}\"\n    except Exception as e:\n        self.is_connected_flag = False\n        logger.exception(f\"Failed to connect to MLflow Tracking Server: {e}\")\n        return False, f\"Failed to connect to MLflow Tracking Server: {e!s}\"\n</code></pre>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.connection.MLflowConnection.get_client","title":"<code>get_client()</code>","text":"<p>Get MLflow client instance.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.connection.MLflowConnection.get_client--returns","title":"Returns","text":"<pre><code>MlflowClient: MLflow client instance.\n</code></pre>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.connection.MLflowConnection.get_client--raises","title":"Raises","text":"<pre><code>MLflowConnectionError: If not connected to MLflow Tracking Server.\n</code></pre> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def get_client(self) -&gt; MlflowClient:\n    \"\"\"Get MLflow client instance.\n\n    Returns\n    -------\n        MlflowClient: MLflow client instance.\n\n    Raises\n    ------\n        MLflowConnectionError: If not connected to MLflow Tracking Server.\n\n    \"\"\"\n    if self.client is None:\n        msg = \"Not connected to MLflow Tracking Server. Call connect() first.\"\n        raise MLflowConnectionError(msg)\n    return self.client\n</code></pre>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.connection.MLflowConnection.get_connection_info","title":"<code>get_connection_info()</code>","text":"<p>Get connection information.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.connection.MLflowConnection.get_connection_info--returns","title":"Returns","text":"<pre><code>Dict[str, Any]: Connection information.\n</code></pre> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def get_connection_info(self) -&gt; dict[str, Any]:\n    \"\"\"Get connection information.\n\n    Returns\n    -------\n        Dict[str, Any]: Connection information.\n\n    \"\"\"\n    return {\n        \"tracking_uri\": self.config.tracking_uri,\n        \"connection_type\": self.config.connection_type,\n        \"is_connected\": self.is_connected_flag,\n    }\n</code></pre>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.connection.MLflowConnection.is_connected","title":"<code>is_connected()</code>","text":"<p>Check if connected to MLflow Tracking Server.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.connection.MLflowConnection.is_connected--returns","title":"Returns","text":"<pre><code>bool: True if connected, False otherwise.\n</code></pre> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def is_connected(self) -&gt; bool:\n    \"\"\"Check if connected to MLflow Tracking Server.\n\n    Returns\n    -------\n        bool: True if connected, False otherwise.\n\n    \"\"\"\n    return self.is_connected_flag\n</code></pre>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.core","title":"<code>core</code>","text":"<p>Core utilities and functionality for MLflow Assistant.</p> <p>This module provides foundational classes, functions, and utilities used across the MLflow Assistant project, including shared logic for managing workflows and interactions with the MLflow Tracking Server.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.core.get_mlflow_client","title":"<code>get_mlflow_client()</code>","text":"<p>Initialize and return an MLflow client instance.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.core.get_mlflow_client--returns","title":"Returns","text":"<pre><code>MlflowClient: An instance of the MLflow client.\n</code></pre> Source code in <code>src/mlflow_assistant/core/core.py</code> <pre><code>def get_mlflow_client():\n    \"\"\"Initialize and return an MLflow client instance.\n\n    Returns\n    -------\n        MlflowClient: An instance of the MLflow client.\n\n    \"\"\"\n    return MlflowClient()\n</code></pre>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.provider","title":"<code>provider</code>","text":"<p>Provider integrations for MLflow Assistant.</p> <p>This module defines the interfaces and implementations for integrating with various large language model (LLM) providers, such as OpenAI and Ollama.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.core.workflow","title":"<code>workflow</code>","text":"<p>Workflow management for LangGraph in MLflow Assistant.</p> <p>This module provides functionality for defining, managing, and executing workflows using LangGraph, enabling seamless integration with MLflow for tracking and managing machine learning workflows.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.utils","title":"<code>utils</code>","text":"<p>Utility functions and helpers for MLflow Assistant.</p> <p>This package contains shared utilities and helper functions used across the MLflow Assistant project, including definitions, exceptions, and other reusable components.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.utils.definitions","title":"<code>definitions</code>","text":"<p>Constants and definitions for the MLflow Assistant.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.utils.definitions.MLflowConnectionConfig","title":"<code>MLflowConnectionConfig(tracking_uri)</code>  <code>dataclass</code>","text":"<p>Configuration for MLflow connection.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.utils.definitions.MLflowConnectionConfig.connection_type","title":"<code>connection_type</code>  <code>property</code>","text":"<p>Return the connection type (local or remote).</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.utils.exceptions","title":"<code>exceptions</code>","text":"<p>Custom exceptions for the MLflow Assistant.</p>"},{"location":"reference/mlflow_assistant/__init__/#mlflow_assistant.utils.exceptions.MLflowConnectionError","title":"<code>MLflowConnectionError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when there's an issue connecting to MLflow Tracking Server.</p>"},{"location":"reference/mlflow_assistant/core/__init__/","title":"init","text":""},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core","title":"<code>mlflow_assistant.core</code>","text":"<p>Core functionality for MLflow Assistant.</p> <p>This subpackage contains the core modules for managing connections, workflows, and interactions with the MLflow Tracking Server.</p>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.cli","title":"<code>cli</code>","text":"<p>Command-line interface (CLI) for MLflow Assistant.</p> <p>This module provides the CLI entry points for interacting with the MLflow Assistant, allowing users to manage connections, workflows, and other operations via the command line.</p>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.connection","title":"<code>connection</code>","text":"<p>MLflow connection module for handling connections to MLflow Tracking Server.</p> <p>This module provides functionality to connect to both local and remote MLflow Tracking Servers using environment variables or direct configuration.</p>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.connection.MLflowConnection","title":"<code>MLflowConnection(tracking_uri=None, client_factory=None)</code>","text":"<p>MLflow connection class to handle connections to MLflow Tracking Server.</p> <p>This class provides functionality to connect to both local and remote MLflow Tracking Servers.</p> <p>Initialize MLflow connection.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_uri</code> <code>str | None</code> <p>URI of the MLflow Tracking Server. If None, will try to get from environment.</p> <code>None</code> <code>client_factory</code> <code>Any</code> <p>A callable to create the MlflowClient instance. Defaults to MlflowClient.</p> <code>None</code> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def __init__(self, tracking_uri: str | None = None, client_factory: Any = None):\n    \"\"\"Initialize MLflow connection.\n\n    Args:\n        tracking_uri: URI of the MLflow Tracking Server. If None, will try to get from environment.\n        client_factory: A callable to create the MlflowClient instance. Defaults to MlflowClient.\n\n    \"\"\"\n    self.config = self._load_config(tracking_uri=tracking_uri)\n    self.client = None\n    self.is_connected_flag = False\n    self.client_factory = client_factory or MlflowClient\n</code></pre>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.connection.MLflowConnection.connect","title":"<code>connect()</code>","text":"<p>Connect to MLflow Tracking Server.</p>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.connection.MLflowConnection.connect--returns","title":"Returns","text":"<pre><code>Tuple[bool, str]: (success, message)\n</code></pre> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def connect(self) -&gt; tuple[bool, str]:\n    \"\"\"Connect to MLflow Tracking Server.\n\n    Returns\n    -------\n        Tuple[bool, str]: (success, message)\n\n    \"\"\"\n    try:\n        logger.info(f\"Connecting to MLflow Tracking Server at {self.config.tracking_uri}\")\n        mlflow.set_tracking_uri(self.config.tracking_uri)\n        self.client = self.client_factory(tracking_uri=self.config.tracking_uri)\n        self.client.search_experiments()  # Trigger connection attempt\n        self.is_connected_flag = True\n        logger.info(f\"Successfully connected to MLflow Tracking Server at {self.config.tracking_uri}\")\n        return True, f\"Successfully connected to MLflow Tracking Server at {self.config.tracking_uri}\"\n    except Exception as e:\n        self.is_connected_flag = False\n        logger.exception(f\"Failed to connect to MLflow Tracking Server: {e}\")\n        return False, f\"Failed to connect to MLflow Tracking Server: {e!s}\"\n</code></pre>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.connection.MLflowConnection.get_client","title":"<code>get_client()</code>","text":"<p>Get MLflow client instance.</p>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.connection.MLflowConnection.get_client--returns","title":"Returns","text":"<pre><code>MlflowClient: MLflow client instance.\n</code></pre>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.connection.MLflowConnection.get_client--raises","title":"Raises","text":"<pre><code>MLflowConnectionError: If not connected to MLflow Tracking Server.\n</code></pre> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def get_client(self) -&gt; MlflowClient:\n    \"\"\"Get MLflow client instance.\n\n    Returns\n    -------\n        MlflowClient: MLflow client instance.\n\n    Raises\n    ------\n        MLflowConnectionError: If not connected to MLflow Tracking Server.\n\n    \"\"\"\n    if self.client is None:\n        msg = \"Not connected to MLflow Tracking Server. Call connect() first.\"\n        raise MLflowConnectionError(msg)\n    return self.client\n</code></pre>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.connection.MLflowConnection.get_connection_info","title":"<code>get_connection_info()</code>","text":"<p>Get connection information.</p>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.connection.MLflowConnection.get_connection_info--returns","title":"Returns","text":"<pre><code>Dict[str, Any]: Connection information.\n</code></pre> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def get_connection_info(self) -&gt; dict[str, Any]:\n    \"\"\"Get connection information.\n\n    Returns\n    -------\n        Dict[str, Any]: Connection information.\n\n    \"\"\"\n    return {\n        \"tracking_uri\": self.config.tracking_uri,\n        \"connection_type\": self.config.connection_type,\n        \"is_connected\": self.is_connected_flag,\n    }\n</code></pre>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.connection.MLflowConnection.is_connected","title":"<code>is_connected()</code>","text":"<p>Check if connected to MLflow Tracking Server.</p>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.connection.MLflowConnection.is_connected--returns","title":"Returns","text":"<pre><code>bool: True if connected, False otherwise.\n</code></pre> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def is_connected(self) -&gt; bool:\n    \"\"\"Check if connected to MLflow Tracking Server.\n\n    Returns\n    -------\n        bool: True if connected, False otherwise.\n\n    \"\"\"\n    return self.is_connected_flag\n</code></pre>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.core","title":"<code>core</code>","text":"<p>Core utilities and functionality for MLflow Assistant.</p> <p>This module provides foundational classes, functions, and utilities used across the MLflow Assistant project, including shared logic for managing workflows and interactions with the MLflow Tracking Server.</p>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.core.get_mlflow_client","title":"<code>get_mlflow_client()</code>","text":"<p>Initialize and return an MLflow client instance.</p>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.core.get_mlflow_client--returns","title":"Returns","text":"<pre><code>MlflowClient: An instance of the MLflow client.\n</code></pre> Source code in <code>src/mlflow_assistant/core/core.py</code> <pre><code>def get_mlflow_client():\n    \"\"\"Initialize and return an MLflow client instance.\n\n    Returns\n    -------\n        MlflowClient: An instance of the MLflow client.\n\n    \"\"\"\n    return MlflowClient()\n</code></pre>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.provider","title":"<code>provider</code>","text":"<p>Provider integrations for MLflow Assistant.</p> <p>This module defines the interfaces and implementations for integrating with various large language model (LLM) providers, such as OpenAI and Ollama.</p>"},{"location":"reference/mlflow_assistant/core/__init__/#mlflow_assistant.core.workflow","title":"<code>workflow</code>","text":"<p>Workflow management for LangGraph in MLflow Assistant.</p> <p>This module provides functionality for defining, managing, and executing workflows using LangGraph, enabling seamless integration with MLflow for tracking and managing machine learning workflows.</p>"},{"location":"reference/mlflow_assistant/core/cli/","title":"Cli","text":""},{"location":"reference/mlflow_assistant/core/cli/#mlflow_assistant.core.cli","title":"<code>mlflow_assistant.core.cli</code>","text":"<p>Command-line interface (CLI) for MLflow Assistant.</p> <p>This module provides the CLI entry points for interacting with the MLflow Assistant, allowing users to manage connections, workflows, and other operations via the command line.</p>"},{"location":"reference/mlflow_assistant/core/connection/","title":"Connection","text":""},{"location":"reference/mlflow_assistant/core/connection/#mlflow_assistant.core.connection","title":"<code>mlflow_assistant.core.connection</code>","text":"<p>MLflow connection module for handling connections to MLflow Tracking Server.</p> <p>This module provides functionality to connect to both local and remote MLflow Tracking Servers using environment variables or direct configuration.</p>"},{"location":"reference/mlflow_assistant/core/connection/#mlflow_assistant.core.connection.MLflowConnection","title":"<code>MLflowConnection(tracking_uri=None, client_factory=None)</code>","text":"<p>MLflow connection class to handle connections to MLflow Tracking Server.</p> <p>This class provides functionality to connect to both local and remote MLflow Tracking Servers.</p> <p>Initialize MLflow connection.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_uri</code> <code>str | None</code> <p>URI of the MLflow Tracking Server. If None, will try to get from environment.</p> <code>None</code> <code>client_factory</code> <code>Any</code> <p>A callable to create the MlflowClient instance. Defaults to MlflowClient.</p> <code>None</code> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def __init__(self, tracking_uri: str | None = None, client_factory: Any = None):\n    \"\"\"Initialize MLflow connection.\n\n    Args:\n        tracking_uri: URI of the MLflow Tracking Server. If None, will try to get from environment.\n        client_factory: A callable to create the MlflowClient instance. Defaults to MlflowClient.\n\n    \"\"\"\n    self.config = self._load_config(tracking_uri=tracking_uri)\n    self.client = None\n    self.is_connected_flag = False\n    self.client_factory = client_factory or MlflowClient\n</code></pre>"},{"location":"reference/mlflow_assistant/core/connection/#mlflow_assistant.core.connection.MLflowConnection.connect","title":"<code>connect()</code>","text":"<p>Connect to MLflow Tracking Server.</p>"},{"location":"reference/mlflow_assistant/core/connection/#mlflow_assistant.core.connection.MLflowConnection.connect--returns","title":"Returns","text":"<pre><code>Tuple[bool, str]: (success, message)\n</code></pre> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def connect(self) -&gt; tuple[bool, str]:\n    \"\"\"Connect to MLflow Tracking Server.\n\n    Returns\n    -------\n        Tuple[bool, str]: (success, message)\n\n    \"\"\"\n    try:\n        logger.info(f\"Connecting to MLflow Tracking Server at {self.config.tracking_uri}\")\n        mlflow.set_tracking_uri(self.config.tracking_uri)\n        self.client = self.client_factory(tracking_uri=self.config.tracking_uri)\n        self.client.search_experiments()  # Trigger connection attempt\n        self.is_connected_flag = True\n        logger.info(f\"Successfully connected to MLflow Tracking Server at {self.config.tracking_uri}\")\n        return True, f\"Successfully connected to MLflow Tracking Server at {self.config.tracking_uri}\"\n    except Exception as e:\n        self.is_connected_flag = False\n        logger.exception(f\"Failed to connect to MLflow Tracking Server: {e}\")\n        return False, f\"Failed to connect to MLflow Tracking Server: {e!s}\"\n</code></pre>"},{"location":"reference/mlflow_assistant/core/connection/#mlflow_assistant.core.connection.MLflowConnection.get_client","title":"<code>get_client()</code>","text":"<p>Get MLflow client instance.</p>"},{"location":"reference/mlflow_assistant/core/connection/#mlflow_assistant.core.connection.MLflowConnection.get_client--returns","title":"Returns","text":"<pre><code>MlflowClient: MLflow client instance.\n</code></pre>"},{"location":"reference/mlflow_assistant/core/connection/#mlflow_assistant.core.connection.MLflowConnection.get_client--raises","title":"Raises","text":"<pre><code>MLflowConnectionError: If not connected to MLflow Tracking Server.\n</code></pre> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def get_client(self) -&gt; MlflowClient:\n    \"\"\"Get MLflow client instance.\n\n    Returns\n    -------\n        MlflowClient: MLflow client instance.\n\n    Raises\n    ------\n        MLflowConnectionError: If not connected to MLflow Tracking Server.\n\n    \"\"\"\n    if self.client is None:\n        msg = \"Not connected to MLflow Tracking Server. Call connect() first.\"\n        raise MLflowConnectionError(msg)\n    return self.client\n</code></pre>"},{"location":"reference/mlflow_assistant/core/connection/#mlflow_assistant.core.connection.MLflowConnection.get_connection_info","title":"<code>get_connection_info()</code>","text":"<p>Get connection information.</p>"},{"location":"reference/mlflow_assistant/core/connection/#mlflow_assistant.core.connection.MLflowConnection.get_connection_info--returns","title":"Returns","text":"<pre><code>Dict[str, Any]: Connection information.\n</code></pre> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def get_connection_info(self) -&gt; dict[str, Any]:\n    \"\"\"Get connection information.\n\n    Returns\n    -------\n        Dict[str, Any]: Connection information.\n\n    \"\"\"\n    return {\n        \"tracking_uri\": self.config.tracking_uri,\n        \"connection_type\": self.config.connection_type,\n        \"is_connected\": self.is_connected_flag,\n    }\n</code></pre>"},{"location":"reference/mlflow_assistant/core/connection/#mlflow_assistant.core.connection.MLflowConnection.is_connected","title":"<code>is_connected()</code>","text":"<p>Check if connected to MLflow Tracking Server.</p>"},{"location":"reference/mlflow_assistant/core/connection/#mlflow_assistant.core.connection.MLflowConnection.is_connected--returns","title":"Returns","text":"<pre><code>bool: True if connected, False otherwise.\n</code></pre> Source code in <code>src/mlflow_assistant/core/connection.py</code> <pre><code>def is_connected(self) -&gt; bool:\n    \"\"\"Check if connected to MLflow Tracking Server.\n\n    Returns\n    -------\n        bool: True if connected, False otherwise.\n\n    \"\"\"\n    return self.is_connected_flag\n</code></pre>"},{"location":"reference/mlflow_assistant/core/core/","title":"Core","text":""},{"location":"reference/mlflow_assistant/core/core/#mlflow_assistant.core.core","title":"<code>mlflow_assistant.core.core</code>","text":"<p>Core utilities and functionality for MLflow Assistant.</p> <p>This module provides foundational classes, functions, and utilities used across the MLflow Assistant project, including shared logic for managing workflows and interactions with the MLflow Tracking Server.</p>"},{"location":"reference/mlflow_assistant/core/core/#mlflow_assistant.core.core.get_mlflow_client","title":"<code>get_mlflow_client()</code>","text":"<p>Initialize and return an MLflow client instance.</p>"},{"location":"reference/mlflow_assistant/core/core/#mlflow_assistant.core.core.get_mlflow_client--returns","title":"Returns","text":"<pre><code>MlflowClient: An instance of the MLflow client.\n</code></pre> Source code in <code>src/mlflow_assistant/core/core.py</code> <pre><code>def get_mlflow_client():\n    \"\"\"Initialize and return an MLflow client instance.\n\n    Returns\n    -------\n        MlflowClient: An instance of the MLflow client.\n\n    \"\"\"\n    return MlflowClient()\n</code></pre>"},{"location":"reference/mlflow_assistant/core/provider/","title":"Provider","text":""},{"location":"reference/mlflow_assistant/core/provider/#mlflow_assistant.core.provider","title":"<code>mlflow_assistant.core.provider</code>","text":"<p>Provider integrations for MLflow Assistant.</p> <p>This module defines the interfaces and implementations for integrating with various large language model (LLM) providers, such as OpenAI and Ollama.</p>"},{"location":"reference/mlflow_assistant/core/workflow/","title":"Workflow","text":""},{"location":"reference/mlflow_assistant/core/workflow/#mlflow_assistant.core.workflow","title":"<code>mlflow_assistant.core.workflow</code>","text":"<p>Workflow management for LangGraph in MLflow Assistant.</p> <p>This module provides functionality for defining, managing, and executing workflows using LangGraph, enabling seamless integration with MLflow for tracking and managing machine learning workflows.</p>"},{"location":"reference/mlflow_assistant/utils/__init__/","title":"init","text":""},{"location":"reference/mlflow_assistant/utils/__init__/#mlflow_assistant.utils","title":"<code>mlflow_assistant.utils</code>","text":"<p>Utility functions and helpers for MLflow Assistant.</p> <p>This package contains shared utilities and helper functions used across the MLflow Assistant project, including definitions, exceptions, and other reusable components.</p>"},{"location":"reference/mlflow_assistant/utils/__init__/#mlflow_assistant.utils.definitions","title":"<code>definitions</code>","text":"<p>Constants and definitions for the MLflow Assistant.</p>"},{"location":"reference/mlflow_assistant/utils/__init__/#mlflow_assistant.utils.definitions.MLflowConnectionConfig","title":"<code>MLflowConnectionConfig(tracking_uri)</code>  <code>dataclass</code>","text":"<p>Configuration for MLflow connection.</p>"},{"location":"reference/mlflow_assistant/utils/__init__/#mlflow_assistant.utils.definitions.MLflowConnectionConfig.connection_type","title":"<code>connection_type</code>  <code>property</code>","text":"<p>Return the connection type (local or remote).</p>"},{"location":"reference/mlflow_assistant/utils/__init__/#mlflow_assistant.utils.exceptions","title":"<code>exceptions</code>","text":"<p>Custom exceptions for the MLflow Assistant.</p>"},{"location":"reference/mlflow_assistant/utils/__init__/#mlflow_assistant.utils.exceptions.MLflowConnectionError","title":"<code>MLflowConnectionError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when there's an issue connecting to MLflow Tracking Server.</p>"},{"location":"reference/mlflow_assistant/utils/definitions/","title":"Definitions","text":""},{"location":"reference/mlflow_assistant/utils/definitions/#mlflow_assistant.utils.definitions","title":"<code>mlflow_assistant.utils.definitions</code>","text":"<p>Constants and definitions for the MLflow Assistant.</p>"},{"location":"reference/mlflow_assistant/utils/definitions/#mlflow_assistant.utils.definitions.MLflowConnectionConfig","title":"<code>MLflowConnectionConfig(tracking_uri)</code>  <code>dataclass</code>","text":"<p>Configuration for MLflow connection.</p>"},{"location":"reference/mlflow_assistant/utils/definitions/#mlflow_assistant.utils.definitions.MLflowConnectionConfig.connection_type","title":"<code>connection_type</code>  <code>property</code>","text":"<p>Return the connection type (local or remote).</p>"},{"location":"reference/mlflow_assistant/utils/exceptions/","title":"Exceptions","text":""},{"location":"reference/mlflow_assistant/utils/exceptions/#mlflow_assistant.utils.exceptions","title":"<code>mlflow_assistant.utils.exceptions</code>","text":"<p>Custom exceptions for the MLflow Assistant.</p>"},{"location":"reference/mlflow_assistant/utils/exceptions/#mlflow_assistant.utils.exceptions.MLflowConnectionError","title":"<code>MLflowConnectionError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when there's an issue connecting to MLflow Tracking Server.</p>"}]}